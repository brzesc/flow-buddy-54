generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Manager
  Operator
}

enum OrderStatus {
  New
  Processing
  Fulfilled
  Cancelled
  OnHold
}

enum InvoiceStatus {
  Draft
  Issued
  Paid
  Cancelled
}

enum IntegrationProvider {
  Shopify
  Email
  Invoice
}

enum EventType {
  OrderCreated
  OrderUpdated
  StatusChanged
  EmailReceived
  InvoiceGenerated
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  role         UserRole @default(Operator)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Customer {
  id               String   @id @default(uuid())
  shopifyCustomerId String?  @unique
  email            String   @unique
  firstName        String?
  lastName         String?
  phone            String?
  company          String?
  vatId            String?
  addresses        Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  orders Order[]

  @@index([email])
  @@map("customers")
}

model Order {
  id            String      @id @default(uuid())
  number        String      @unique
  shopifyOrderId String?     @unique
  customerId    String?
  customer      Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  status        OrderStatus @default(New)
  totalAmount   Decimal     @db.Decimal(10, 2)
  currency      String      @default("USD")
  orderDate     DateTime
  productTitles String[]
  emailUnread   Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  emails   Email[]
  invoices Invoice[]
  events   Event[]

  @@index([number])
  @@index([status])
  @@index([customerId])
  @@index([orderDate])
  @@map("orders")
}

model Invoice {
  id         String        @id @default(uuid())
  orderId    String
  order      Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  externalId String?
  total      Decimal       @db.Decimal(10, 2)
  currency   String        @default("USD")
  issuedAt   DateTime      @default(now())
  pdfUrl     String?
  status     InvoiceStatus @default(Draft)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([orderId])
  @@map("invoices")
}

model Email {
  id         String   @id @default(uuid())
  threadId   String
  orderId    String?
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  subject    String
  snippet    String?
  receivedAt DateTime
  threadKey  String?
  isUnread   Boolean  @default(true)
  createdAt  DateTime @default(now())

  @@index([orderId])
  @@index([threadId])
  @@map("emails")
}

model Integration {
  id         String              @id @default(uuid())
  provider   IntegrationProvider
  isActive   Boolean             @default(true)
  config     Json
  lastSyncAt DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([provider])
  @@map("integrations")
}

model Event {
  id        String    @id @default(uuid())
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  type      EventType
  payload   Json
  createdAt DateTime  @default(now())

  @@index([orderId])
  @@index([createdAt])
  @@map("events")
}
